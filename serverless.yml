service: flect-chime-sdk # you should configure here. use only lowercase and no underbar

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  #region: us-east-1
  region: ap-northeast-1 # Tokyo
  environment:
    MEETINGS_TABLE_NAME    : !Ref Meetings
    ATTENDEES_TABLE_NAME   : !Ref Attendees
    SQS_QUEUE_ARN          : !GetAtt MeetingNotificationsQueue.Arn
    CONNECTIONS_TABLE_NAME : !Ref ConnectionsTable
    MEETING_ROOM_ID_PREFIX : ""
  websocketsApiName: ${self:service.name}
  websocketsApiRouteSelectionExpression: $request.body.action  

plugins:
  - serverless-s3-sync

custom:
  webSiteName: ${self:service}-web
  s3Sync:
    - bucketName: ${self:custom.webSiteName}
      localDir: build

package:
  exclude:
    - ./**
  include:
    - serverless.yml
    - sls/**
    
resources:
  Resources:
    HTMLBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webSiteName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    StaticSiteS3BucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
            Bucket:
              Ref: HTMLBucket
            PolicyDocument:
              Statement:
                - Sid: PublicReadGetObject
                  Effect: Allow
                  Principal: "*"
                  Action:
                  - s3:GetObject
                  Resource:
                    Fn::Join: ["", ["arn:aws:s3:::",{"Ref": "HTMLBucket"},"/*"]]

    Meetings:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: "Title"
            AttributeType: "S"
          - AttributeName: "Passcode"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "Title"
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        GlobalSecondaryIndexes:
          - IndexName: "Passcode"
            KeySchema:
              - AttributeName: "Passcode"
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"
        TimeToLiveSpecification:
          AttributeName: "TTL"
          Enabled: true
    Attendees:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: "AttendeeId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "AttendeeId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
    ChimeMeetingsAccessPolicy: # In-line
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ChimeMeetingsAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - arn:aws:execute-api:*:*:**/@connections/*            

            - Effect: Allow
              Action:
                - 'chime:CreateMeeting'
                - 'chime:DeleteMeeting'
                - 'chime:GetMeeting'
                - 'chime:ListMeetings'
                - 'chime:BatchCreateAttendee'
                - 'chime:CreateAttendee'
                - 'chime:DeleteAttendee'
                - 'chime:GetAttendee'
                - 'chime:ListAttendees'
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
                - 'dynamodb:GetItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:Query'
                - 'dynamodb:DeleteItem'
              Resource: '*'
        Roles:
          - Ref: FLECTChimeSdkLambdaRole
    FLECTChimeSdkLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com            
              Action:
                - sts:AssumeRole
    MeetingNotificationsQueue:
      Type: AWS::SQS::Queue

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: MeetingId
          AttributeType: S
        - AttributeName: AttendeeId
          AttributeType: S
        KeySchema:
        - AttributeName: MeetingId
          KeyType: HASH
        - AttributeName: AttendeeId
          KeyType: RANGE
        SSESpecification:
          SSEEnabled: True
        TimeToLiveSpecification:
          AttributeName: TTL
          Enabled: true      
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  CreateMeetingLambda:
    handler: sls/handlers.createMeeting
    role: FLECTChimeSdkLambdaRole
    events:
      - http:
          path: meeting
          method: post
          cors: true
          
  JoinLambda:
    handler: sls/handlers.join
    role: FLECTChimeSdkLambdaRole
    events:
      - http:
          path: join
          method: post
          cors: true

  EndLambda:
    handler: sls/handlers.end
    role: FLECTChimeSdkLambdaRole
    events:
      - http:
          path: end
          method: post
          cors: true

  AttendeeLambda:
    handler: sls/handlers.attendee
    role: FLECTChimeSdkLambdaRole
    events:
      - http:
          path: attendee
          method: get
          cors: true


  ChimeSQSQueueLambda:
    handler: sls/notification_handlers.sqs_handler
    role: FLECTChimeSdkLambdaRole
    events:
      - sqs:
        arn: !GetAtt MeetingNotificationsQueue.Arn
        batchSize: 10

  connect:
    handler: sls/messaging.onconnect
    role: FLECTChimeSdkLambdaRole
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource:
              - 'route.request.querystring.joinToken'
              - 'route.request.querystring.meetingId'
              - 'route.request.querystring.attendeeId'

  disconnect:
    handler: sls/messaging.ondisconnect
    role: FLECTChimeSdkLambdaRole
    events:
      - websocket:
          route: $disconnect

  sendmessage:
    handler: sls/messaging.sendmessage
    role: FLECTChimeSdkLambdaRole
    events:
      - websocket:
          route: sendmessage
  auth:
    handler: sls/messaging.authorize
    role: FLECTChimeSdkLambdaRole
